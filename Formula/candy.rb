# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Candy < Formula
  desc "Zero-config reverse proxy server"
  homepage "https://github.com/owenthereal/candy"
  version "0.6.3"
  license "Apache 2.0"

  depends_on "nss"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/owenthereal/candy/releases/download/v0.6.3/candy_darwin_arm64.tar.gz"
      sha256 "41d7c3baea51999cc17cc4e76bb83e67a39fa6256c8b8563c5f930a48c856f02"

      def install
        bin.install "bin/candy"
        prefix.install_metafiles
        etc.install "example/candyconfig" => "candyconfig"
        (etc/"resolver").install "example/mac/candy-test" => "candy-test"
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/owenthereal/candy/releases/download/v0.6.3/candy_darwin_amd64.tar.gz"
      sha256 "4ffb977adbe142909ebf3a0de9de674d4c06f40080d79f8d934ddba85032a7d0"

      def install
        bin.install "bin/candy"
        prefix.install_metafiles
        etc.install "example/candyconfig" => "candyconfig"
        (etc/"resolver").install "example/mac/candy-test" => "candy-test"
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/owenthereal/candy/releases/download/v0.6.3/candy_linux_arm64.tar.gz"
      sha256 "93b5b6554fd8a7878078026ed4b49d27c2764f4f7801c200df5e744a06625e7c"

      def install
        bin.install "bin/candy"
        prefix.install_metafiles
        etc.install "example/candyconfig" => "candyconfig"
        (etc/"resolver").install "example/mac/candy-test" => "candy-test"
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/owenthereal/candy/releases/download/v0.6.3/candy_linux_amd64.tar.gz"
      sha256 "5b50df6fb84a698ca2742fc45ea7af781dbd2f0282a1e9d81f1753590195434e"

      def install
        bin.install "bin/candy"
        prefix.install_metafiles
        etc.install "example/candyconfig" => "candyconfig"
        (etc/"resolver").install "example/mac/candy-test" => "candy-test"
      end
    end
    if Hardware::CPU.arm? && !Hardware::CPU.is_64_bit?
      url "https://github.com/owenthereal/candy/releases/download/v0.6.3/candy_linux_armv6.tar.gz"
      sha256 "e09c4e7560a03a2d42b3ff57a6795aca7f3887e41d6795d49d7e1b8e4685d009"

      def install
        bin.install "bin/candy"
        prefix.install_metafiles
        etc.install "example/candyconfig" => "candyconfig"
        (etc/"resolver").install "example/mac/candy-test" => "candy-test"
      end
    end
  end

  head "https://github.com/owenthereal/candy.git"

  def caveats
    <<~EOS
      To finish the installation, you need to create a DNS resolver file
      in /etc/resolver/YOUR_DOMAIN. Creating the /etc/resolver directory
      and the config file requires superuser privileges. You can set things
      up with an one-liner

          sudo candy setup

      Alternatively, you can execute the following bash script

          sudo mkdir -p /etc/resolver && \\
            sudo chown -R $(whoami):$(id -g -n) /etc/resolver && \\
            cp #{etc/"resolver/candy-test"} /etc/resolver/candy-test

      To have launchd start Candy now and restart at login

          brew services start candy

      Or, if you don't want/need a background service you can just run

          candy run

      A sample Candy config file is in #{etc/"candyconfig"}. You can
      copy it to your home to override Candy's default setting

          cp #{etc/"candyconfig"} ~/.candyconfig
    EOS
  end

  service do
    run [opt_bin/"candy", "launch", "--dns-local-ip"]
    keep_alive true
    run_at_load true
    sockets "Socket" => "tcp://0.0.0.0:80", "SocketTLS" => "tcp://0.0.0.0:443"
    working_dir HOMEBREW_PREFIX
    log_path var/"log/candy/output.log"
    error_log_path var/"log/candy/output.log"
  end

  test do
    http = free_port
    https = free_port
    dns = free_port
    admin = free_port

    mkdir_p testpath/".candy"
    (testpath/".candy/app").write(admin)

    (testpath/"candyconfig").write <<~EOS
      {
        "domain": ["brew-test"],
        "http-addr": "127.0.0.1:#{http}",
        "https-addr": "127.0.0.1:#{https}",
        "dns-addr": "127.0.0.1:#{dns}",
        "admin-addr": "127.0.0.1:#{admin}",
        "host-root": "#{testpath/".candy"}"
      }
    EOS
    puts shell_output("cat #{testpath/"candyconfig"}")

    fork do
      exec bin/"candy", "run", "--config", testpath/"candyconfig"
    end

    sleep 2

    assert_match "\":#{http}\"", shell_output("curl -s http://127.0.0.1:#{admin}/config/apps/http/servers/candy/listen/0")
    assert_match "\":#{https}\"", shell_output("curl -s http://127.0.0.1:#{admin}/config/apps/http/servers/candy/listen/1")
    assert_match "127.0.0.1", shell_output("dig +short @127.0.0.1 -p #{dns} app.brew-test")
  end
end
