# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Candy < Formula
  desc "Zero-config reverse proxy server"
  homepage "https://github.com/owenthereal/candy"
  version "0.6.0"
  license "Apache 2.0"

  depends_on "nss"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/owenthereal/candy/releases/download/v0.6.0/candy_darwin_arm64.tar.gz"
      sha256 "45c0579ce6e113f19ab4459f85e58b461d3248418a961ac376bd42320d15983b"

      def install
        bin.install "bin/candy"
        prefix.install_metafiles
        etc.install "example/candyconfig" => "candyconfig"
        (etc/"resolver").install "example/mac/candy-test" => "candy-test"
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/owenthereal/candy/releases/download/v0.6.0/candy_darwin_amd64.tar.gz"
      sha256 "0840dc29479367fcf11af6d998c63e1a4fed1ad89ba6af30d64aa89e5b191dfb"

      def install
        bin.install "bin/candy"
        prefix.install_metafiles
        etc.install "example/candyconfig" => "candyconfig"
        (etc/"resolver").install "example/mac/candy-test" => "candy-test"
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/owenthereal/candy/releases/download/v0.6.0/candy_linux_amd64.tar.gz"
      sha256 "3b4515d234d411efb8ce5c310c79a0e39358f11b61cc308c4ea875bd3187ca28"

      def install
        bin.install "bin/candy"
        prefix.install_metafiles
        etc.install "example/candyconfig" => "candyconfig"
        (etc/"resolver").install "example/mac/candy-test" => "candy-test"
      end
    end
    if Hardware::CPU.arm? && !Hardware::CPU.is_64_bit?
      url "https://github.com/owenthereal/candy/releases/download/v0.6.0/candy_linux_armv6.tar.gz"
      sha256 "98682158246a92b6a3cc084fbe75aeb4ac3c207ce6adf7fe62787a6b1a3bc7d3"

      def install
        bin.install "bin/candy"
        prefix.install_metafiles
        etc.install "example/candyconfig" => "candyconfig"
        (etc/"resolver").install "example/mac/candy-test" => "candy-test"
      end
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/owenthereal/candy/releases/download/v0.6.0/candy_linux_arm64.tar.gz"
      sha256 "b2ee3acb37ad7e6d87a301af7bc41ca4b7bc4e0b574a8b4ccb0b5d23d7f236c8"

      def install
        bin.install "bin/candy"
        prefix.install_metafiles
        etc.install "example/candyconfig" => "candyconfig"
        (etc/"resolver").install "example/mac/candy-test" => "candy-test"
      end
    end
  end

  head "https://github.com/owenthereal/candy.git"

  def caveats
    <<~EOS
      <<~EOS
        To finish the installation, you need to create a DNS resolver file
        in /etc/resolver/YOUR_DOMAIN. Creating the /etc/resolver directory
        and the config file requires superuser privileges. You can set things
        up with an one-liner

            sudo candy setup

        Alternatively, you can execute the following bash script

            sudo mkdir -p /etc/resolver && \\
              sudo chown -R $(whoami):$(id -g -n) /etc/resolver && \\
              cp #{etc/"resolver/candy-test"} /etc/resolver/candy-test

        To have launchd start Candy now and restart at login

            brew services start candy

        Or, if you don't want/need a background service you can just run

            candy run

        A sample Candy config file is in #{etc/"candyconfig"}. You can
        copy it to your home to override Candy's default setting

            cp #{etc/"candyconfig"} ~/.candyconfig
      EOS
    EOS
  end

  service do
    run [opt_bin/"candy", "launch", "--dns-local-ip"]
    keep_alive true
    run_at_load true
    sockets "Socket" => "tcp://0.0.0.0:80", "SocketTLS" => "tcp://0.0.0.0:443"
    working_dir HOMEBREW_PREFIX
    log_path var/"log/candy/output.log"
    error_log_path var/"log/candy/output.log"
  end

  test do
    http = free_port
    https = free_port
    dns = free_port
    admin = free_port

    mkdir_p testpath/".candy"
    (testpath/".candy/app").write(admin)

    (testpath/"candyconfig").write <<~EOS
      {
        "domain": ["brew-test"],
        "http-addr": "127.0.0.1:#{http}",
        "https-addr": "127.0.0.1:#{https}",
        "dns-addr": "127.0.0.1:#{dns}",
        "admin-addr": "127.0.0.1:#{admin}",
        "host-root": "#{testpath/".candy"}"
      }
    EOS
    puts shell_output("cat #{testpath/"candyconfig"}")

    fork do
      exec bin/"candy", "run", "--config", testpath/"candyconfig"
    end

    sleep 2

    assert_match "\":#{http}\"", shell_output("curl -s http://127.0.0.1:#{admin}/config/apps/http/servers/candy/listen/0")
    assert_match "\":#{https}\"", shell_output("curl -s http://127.0.0.1:#{admin}/config/apps/http/servers/candy/listen/1")
    assert_match "127.0.0.1", shell_output("dig +short @127.0.0.1 -p #{dns} app.brew-test")
  end
end
